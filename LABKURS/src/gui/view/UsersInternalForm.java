/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.view;

import BLL.Users;
import Exceptions.UsersException;
import DAL.UsersInterface;
import DAL.UsersRepository;
import gui.model.UsersTableModel;
import java.util.List;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.plaf.basic.BasicInternalFrameUI;


public class UsersInternalForm extends javax.swing.JInternalFrame {

    UsersTableModel utm;
    UsersInterface uie = new UsersRepository();

    public UsersInternalForm() throws UsersException {
        initComponents();
        loadTabelen();
        tabelaSelectedIndexChange();
        numri_rendor_field.setEditable(false);
        
        BasicInternalFrameUI ui = (javax.swing.plaf.basic.BasicInternalFrameUI) this.getUI();
        JComponent title = ui.getNorthPane();
        ui.setNorthPane(null);
        ui.setNorthPane(title);
        title.remove(0);
        ndryshoPozicionetIconave();

    }

    private void tabelaSelectedIndexChange() {
        final ListSelectionModel rowSM = users_tabela.getSelectionModel();
        rowSM.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent Ise) {
                if (Ise.getValueIsAdjusting()) {
                    return;
                }
                ListSelectionModel rowSM = (ListSelectionModel) Ise.getSource();
                int selectedIndex = rowSM.getAnchorSelectionIndex();
                if (selectedIndex > -1) {
                    Users u = utm.getUsers(selectedIndex);
                    numri_rendor_field.setText(u.getUId() + "");
                    user_id_field.setText(u.getUIdlog() + "");
                    user_password_field.setText(u.getUPassword());

                }
            }
        });
    }

    public boolean ekzistonLlogaria() {
        try {
            String user_id = user_id_field.getText().trim();
            List<Users> lista = uie.findAll();
            for (int i = 0; i < lista.size(); i++) {
                if (lista.get(i).getUIdlog().equals(user_id)) {
                    JOptionPane.showMessageDialog(this, "CPDS: Kjo llogari është e regjistruar në kompani.");
                    return true;
                }
            }

        } catch (UsersException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
        return false;
    }

    private void loadTabelen() throws UsersException {
        uie.findAll();
        List<Users> list = uie.findAll();
        utm = new UsersTableModel(list);
        users_tabela.setModel(utm);
        utm.fireTableDataChanged();

    }

    public void pastroFields() {
        users_tabela.clearSelection();
        numri_rendor_field.setText("");
        user_id_field.setText("");
        user_password_field.setText("");

    }

    private void ndryshoPozicionetIconave() {
        ruaj_LlogarineBtn.setHorizontalTextPosition(SwingConstants.LEFT);
        pastro_HapsiratBtn.setHorizontalTextPosition(SwingConstants.LEFT);
        ruaj_LlogarineBtn.setIconTextGap(10);
        pastro_HapsiratBtn.setIconTextGap(5);
    }

    private static boolean kaVetemShkronja(String input) {
        for (int i = 0; i < input.length(); ++i) {
            if (!Character.isLetter(input.charAt(i))) {
                return false;
            }
        }
        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    //@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        ruaj_LlogarineBtn = new javax.swing.JButton();
        pastro_HapsiratBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        users_tabela = new javax.swing.JTable();
        numri_rendor_field = new javax.swing.JTextField();
        user_id_field = new javax.swing.JTextField();
        user_password_field = new javax.swing.JTextField();
        numri_Rendor_jlabel = new javax.swing.JLabel();
        id_userit_jlabel = new javax.swing.JLabel();
        passwordi_userit_jlabel = new javax.swing.JLabel();

        setFocusCycleRoot(false);
        setFocusable(false);
        setMinimumSize(new java.awt.Dimension(1205, 199));
        setPreferredSize(new java.awt.Dimension(1205, 199));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        ruaj_LlogarineBtn.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        ruaj_LlogarineBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/images/icons8-save-30.png"))); // NOI18N
        ruaj_LlogarineBtn.setText("RUAJ LLOGARINE");
        ruaj_LlogarineBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ruaj_LlogarineBtnActionPerformed(evt);
            }
        });

        pastro_HapsiratBtn.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        pastro_HapsiratBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/images/icons8-available-updates-30.png"))); // NOI18N
        pastro_HapsiratBtn.setText("PASTRO HAPSIRAT");
        pastro_HapsiratBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pastro_HapsiratBtnActionPerformed(evt);
            }
        });

        users_tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(users_tabela);

        numri_Rendor_jlabel.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        numri_Rendor_jlabel.setText("Numri rendor:");

        id_userit_jlabel.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        id_userit_jlabel.setText("ID e userit:");

        passwordi_userit_jlabel.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        passwordi_userit_jlabel.setText("Passwordi:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(281, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(numri_rendor_field, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numri_Rendor_jlabel))
                        .addGap(78, 78, 78)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(user_id_field, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(id_userit_jlabel))
                        .addGap(87, 87, 87)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(passwordi_userit_jlabel)
                            .addComponent(user_password_field, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(89, 89, 89)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pastro_HapsiratBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ruaj_LlogarineBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(124, 124, 124))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(ruaj_LlogarineBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pastro_HapsiratBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordi_userit_jlabel)
                    .addComponent(id_userit_jlabel)
                    .addComponent(numri_Rendor_jlabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(user_password_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(user_id_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numri_rendor_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void pastro_HapsiratBtnActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        pastroFields();
    }                                                  

    public static void metodavariablaPunetori() {
        UsersRepository usr = new UsersRepository();
        try {
            List<Users> lista = usr.findAll();
            int a = lista.get(lista.size() - 1).getUId();
            gui.view.PunetoriInternalForm.setloginid(a);
            gui.view.PunetoriInternalForm.enableAllPunetoriOptions();
            

        } catch (UsersException ex) {

        }

    }

    public static void metodavariablaKlienti() {
        UsersRepository usr = new UsersRepository();
        try {
            List<Users> lista = usr.findAll();
            int a = lista.get(lista.size() - 1).getUId();
            gui.view.KlientiInternalForm.setloginid(a);
            gui.view.KlientiInternalForm.enableAllKlientiOptions();

        } catch (UsersException ex) {

        }

    }

    public static void disableAllUsersOptions() {
        user_id_field.setEnabled(false);
        user_password_field.setEnabled(false);
        ruaj_LlogarineBtn.setEnabled(false);

    }

    public static void enableAllUsersOptions() {
        user_id_field.setEnabled(true);
        user_password_field.setEnabled(true);
        ruaj_LlogarineBtn.setEnabled(true);

    }


    private void ruaj_LlogarineBtnActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        if (!user_id_field.getText().trim().equals("")
                && !user_password_field.getText().trim().equals("")) {
            int row = users_tabela.getSelectedRow();
            if (row == -1) {
                Users u = new Users();

                String idUserit = user_id_field.getText().replaceAll("\\s", "");
                if (kaVetemShkronja(idUserit)) {
                    if (ekzistonLlogaria()) {
                        pastroFields();
                        return;
                    }
                    u.setUIdlog(idUserit);
                    u.setUPassword(user_password_field.getText());
                } else {
                    JOptionPane.showMessageDialog(this, "Keni shtypur karaktere te pa-lejueshme. Ju lutem provoni perseri.");
                    numri_rendor_field.setText("");
                    return;
                }
                try {
                    uie.create(u);
                    loadTabelen();
                    gui.view.UsersInternalForm.disableAllUsersOptions();
                    metodavariablaPunetori();
                    metodavariablaKlienti();
                    users_tabela.clearSelection(); 
                    pastroFields();
                } catch (UsersException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }

            } else {
                Users usr = utm.getUsers(row);

                String idUserit = user_id_field.getText().replaceAll("\\s", "");
                if (kaVetemShkronja(idUserit)) {
                    if (ekzistonLlogaria()) {
                        pastroFields();
                        return;
                    }
                    usr.setUIdlog(idUserit);
                    usr.setUPassword(user_password_field.getText());
                } else {
                    JOptionPane.showMessageDialog(this, "Keni shtypur karaktere te pa-lejueshme. Ju lutem provoni perseri.");
                    numri_rendor_field.setText("");
                    return;
                }
                try {
                    uie.edit(usr);
                    loadTabelen();
                    users_tabela.clearSelection();
                } catch (UsersException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
                pastroFields();

            }
        } else {
            JOptionPane.showMessageDialog(this, "CPDS: Te gjitha fushat jane obligative ti plotesoni per ta regjistruar llogarine e re!");
        }
    }                                                 

    private void formMouseClicked(java.awt.event.MouseEvent evt) {                                  
        users_tabela.clearSelection();
        pastroFields();
    }                                 


    // Variables declaration - do not modify                     
    private javax.swing.JLabel id_userit_jlabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel numri_Rendor_jlabel;
    private static javax.swing.JTextField numri_rendor_field;
    private javax.swing.JLabel passwordi_userit_jlabel;
    private static javax.swing.JButton pastro_HapsiratBtn;
    private static javax.swing.JButton ruaj_LlogarineBtn;
    private static javax.swing.JTextField user_id_field;
    private static javax.swing.JTextField user_password_field;
    private static javax.swing.JTable users_tabela;
    // End of variables declaration                   
}
